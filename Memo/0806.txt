JPA의 전체적인 구성 요소와 계층을 좀 더 자세히 살펴보면 다음과 같다.

## 1. 영속성 계층 (Persistence Layer)
엔티티 (Entity): 데이터베이스 테이블과 매핑되는 자바 클래스. @Entity 어노테이션이 사용됩니다.

리포지토리 (Repository): 엔티티에 대한 CRUD 작업을 담당하는 인터페이스. Spring Data JPA에서는 JpaRepository를 상속받아 사용하며, @Repository 어노테이션으로 데이터 접근 계층임을 명시합니다.

영속성 컨텍스트 (Persistence Context): JPA의 핵심 개념입니다. 엔티티를 관리하는 논리적인 영역입니다. EntityManager가 영속성 컨텍스트를 통해 엔티티의 생명 주기를 관리합니다. 개발자가 직접적으로 다루는 경우는 드물지만, JPA의 동작 원리를 이해하는 데 필수적입니다.

엔티티 매니저 (EntityManager): 영속성 컨텍스트에 접근하여 엔티티를 생성, 조회, 수정, 삭제하는 인터페이스입니다. Spring Boot에서는 @PersistenceContext를 통해 주입받을 수 있습니다.

엔티티 매니저 팩토리 (EntityManagerFactory): EntityManager 객체를 생성하는 공장 역할을 합니다. 애플리케이션 시작 시 한 번만 생성됩니다. Spring Boot가 자동으로 설정해주므로 개발자가 직접 다루는 경우는 거의 없습니다.

## 2. 비즈니스 계층 (Business Layer)
서비스 (Service): 핵심 비즈니스 로직을 구현하는 계층입니다. 여러 리포지토리를 조합하여 복잡한 작업을 수행하거나, 트랜잭션(@Transactional)을 관리하는 역할을 합니다. @Service 어노테이션을 사용합니다.

## 3. 프레젠테이션 계층 (Presentation Layer)
컨트롤러 (Controller): 사용자(클라이언트)의 요청을 받고 응답을 반환하는 계층입니다. HTTP 요청을 처리하고, 서비스 계층의 메서드를 호출하여 비즈니스 로직을 실행시킵니다. @Controller 또는 @RestController 어노테이션을 사용합니다.

DTO (Data Transfer Object): 데이터 전송 객체로, 계층 간 데이터 교환을 위해 사용됩니다. 예를 들어, 컨트롤러가 클라이언트로부터 받은 요청 데이터를 서비스에 전달하거나, 서비스가 처리한 결과를 컨트롤러로 반환할 때 사용됩니다. 엔티티를 직접 사용하지 않고 DTO를 사용함으로써 계층 간의 의존성을 낮추고, 보안성을 높일 수 있습니다.

## 결론
컨트롤러 -> 서비스 -> 리포지토리 -> 엔티티